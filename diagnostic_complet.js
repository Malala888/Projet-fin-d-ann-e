// Diagnostic complet du syst√®me de param√®tres

async function diagnosticComplet() {
  try {
    console.log("üîç DIAGNOSTIC COMPLET DU SYST√àME...");
    console.log("=====================================");

    // 1. V√©rifier si le serveur r√©pond
    console.log("\n1Ô∏è‚É£ Test de connexion au serveur...");
    try {
      const healthResponse = await fetch('http://localhost:5000/health');
      const healthData = await healthResponse.json();
      console.log("‚úÖ Serveur backend r√©pond correctement");
      console.log("üìä Status:", healthData);
    } catch (error) {
      console.log("‚ùå Serveur backend ne r√©pond pas");
      console.log("üí° D√©marrez le serveur: cd back && npm start");
      return;
    }

    // 2. V√©rifier les donn√©es des √©tudiants
    console.log("\n2Ô∏è‚É£ V√©rification des donn√©es √©tudiants...");
    try {
      const etudiantsResponse = await fetch('http://localhost:5000/etudiants');
      const etudiants = await etudiantsResponse.json();
      console.log(`‚úÖ ${etudiants.length} √©tudiants r√©cup√©r√©s`);

      console.log("\nüìã Donn√©es d√©taill√©es:");
      etudiants.forEach((etudiant, index) => {
        console.log(`${index + 1}. ${etudiant.Nom}:`);
        console.log(`   - Fili√®re: ${etudiant.Filiere || 'NULL'}`);
        console.log(`   - Parcours: ${etudiant.Parcours || 'NULL'}`);
        console.log(`   - Niveau: ${etudiant.Niveau || 'NULL'}`);
      });

    } catch (error) {
      console.log("‚ùå Erreur r√©cup√©ration √©tudiants:", error.message);
      return;
    }

    // 3. Tester la connexion avec un utilisateur
    console.log("\n3Ô∏è‚É£ Test de connexion...");
    try {
      const loginResponse = await fetch('http://localhost:5000/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: 'malala.rakoto@etud.univ.edu',
          password: 'etu123',
          role: 'etudiant'
        })
      });

      if (loginResponse.ok) {
        const loginData = await loginResponse.json();
        console.log("‚úÖ Connexion r√©ussie !");
        console.log("üìã Donn√©es re√ßues:");
        console.log(`   - Nom: ${loginData.user.Nom}`);
        console.log(`   - Fili√®re: ${loginData.user.Filiere || 'NULL'}`);
        console.log(`   - Parcours: ${loginData.user.Parcours || 'NULL'}`);
        console.log(`   - Niveau: ${loginData.user.Niveau || 'NULL'}`);

        // V√©rifier que toutes les donn√©es sont pr√©sentes
        if (loginData.user.Filiere && loginData.user.Parcours && loginData.user.Niveau) {
          console.log("‚úÖ Toutes les donn√©es sont pr√©sentes dans la r√©ponse du serveur");
        } else {
          console.log("‚ùå Des donn√©es sont manquantes dans la r√©ponse du serveur");
        }
      } else {
        console.log("‚ùå √âchec de connexion:", await loginResponse.text());
      }
    } catch (error) {
      console.log("‚ùå Erreur de connexion:", error.message);
    }

    // 4. V√©rifier le frontend
    console.log("\n4Ô∏è‚É£ V√©rification du frontend...");
    console.log("üí° Ouvrez votre navigateur et allez sur:");
    console.log("   http://localhost:3000/login");
    console.log("   Connectez-vous avec:");
    console.log("   Email: malala.rakoto@etud.univ.edu");
    console.log("   Mot de passe: etu123");
    console.log("   Allez sur 'Param√®tres'");

    console.log("\nüîç Dans la console d√©veloppeur (F12), tapez:");
    console.log("   1. localStorage.getItem('user')");
    console.log("   2. JSON.parse(localStorage.getItem('user'))");

    console.log("\nüìã Vous devriez voir:");
    console.log("   - Filiere: 'Informatique'");
    console.log("   - Parcours: 'R√©seaux'");
    console.log("   - Niveau: 'M1'");

    console.log("\nüí° Si les donn√©es sont pr√©sentes dans localStorage mais pas dans le formulaire:");
    console.log("   Il y a un probl√®me avec le code du formulaire");

    console.log("\nüí° Si les donn√©es ne sont pas dans localStorage:");
    console.log("   Il y a un probl√®me avec la route de login");

  } catch (err) {
    console.error("‚ùå Erreur g√©n√©rale:", err.message);
  }
}

// Ex√©cuter le diagnostic
diagnosticComplet();