// Script de v√©rification et correction des donn√©es √©tudiant
const mysql = require("mysql2/promise");

const pool = mysql.createPool({
  host: "localhost",
  user: "root",
  password: "",
  database: "projet_m1",
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

async function verifierEtCorrigerDonneesEtudiant() {
  try {
    console.log("üîç V√©rification des donn√©es √©tudiants...");

    // R√©cup√©rer tous les √©tudiants
    const [etudiants] = await pool.query("SELECT * FROM etudiant");
    console.log(`üìã ${etudiants.length} √©tudiants trouv√©s`);

    for (const etudiant of etudiants) {
      console.log(`\nüë§ √âtudiant: ${etudiant.Nom} (${etudiant.Immatricule})`);
      console.log(`   Email: ${etudiant.Email}`);
      console.log(`   Fili√®re: ${etudiant.Filiere || 'NULL'}`);
      console.log(`   Parcours: ${etudiant.Parcours || 'NULL'}`);
      console.log(`   Niveau: ${etudiant.Niveau || 'NULL'}`);

      // Si les champs sont NULL ou vides, les mettre √† jour
      if (!etudiant.Filiere || !etudiant.Parcours || !etudiant.Niveau) {
        console.log(`üîß Mise √† jour des donn√©es manquantes...`);

        await pool.query(
          `UPDATE etudiant SET Filiere = ?, Parcours = ?, Niveau = ? WHERE Immatricule = ?`,
          [
            etudiant.Filiere || 'Informatique',
            etudiant.Parcours || 'D√©veloppement Web',
            etudiant.Niveau || 'M1',
            etudiant.Immatricule
          ]
        );

        console.log(`‚úÖ Donn√©es mises √† jour pour ${etudiant.Nom}`);
      }
    }

    // V√©rifier les donn√©es apr√®s mise √† jour
    console.log("\nüîç V√©rification apr√®s mise √† jour...");
    const [etudiantsAfter] = await pool.query("SELECT * FROM etudiant WHERE Filiere IS NOT NULL AND Parcours IS NOT NULL AND Niveau IS NOT NULL");
    console.log(`‚úÖ ${etudiantsAfter.length} √©tudiants ont maintenant toutes leurs donn√©es`);

    for (const etudiant of etudiantsAfter) {
      console.log(`   ${etudiant.Nom}: ${etudiant.Filiere} - ${etudiant.Parcours} - ${etudiant.Niveau}`);
    }

  } catch (err) {
    console.error("‚ùå Erreur:", err);
  } finally {
    await pool.end();
  }
}

// Ex√©cuter le script
verifierEtCorrigerDonneesEtudiant();